Missing and empty geometries#

GeoPandas supports, just like in pandas, the concept of missing values (NA
or null values). But for geometry values, there is an additional concept of
empty geometries:

Empty geometriesare actual geometry objects but that have no coordinates
(and thus also no area, for example). They can for example originate from
taking the intersection of two polygons that have no overlap.
The scalar object (when accessing a single element of a GeoSeries) is still
a Shapely geometry object.Missing geometriesare unknown values in a GeoSeries. They will typically
be propagated in operations (for example in calculations of the area or of
the intersection), or ignored in reductions such asunion_all().
The scalar object (when accessing a single element of a GeoSeries) is the
PythonNoneobject.

Empty geometriesare actual geometry objects but that have no coordinates
(and thus also no area, for example). They can for example originate from
taking the intersection of two polygons that have no overlap.
The scalar object (when accessing a single element of a GeoSeries) is still
a Shapely geometry object.

Empty geometriesare actual geometry objects but that have no coordinates
(and thus also no area, for example). They can for example originate from
taking the intersection of two polygons that have no overlap.
The scalar object (when accessing a single element of a GeoSeries) is still
a Shapely geometry object.

Missing geometriesare unknown values in a GeoSeries. They will typically
be propagated in operations (for example in calculations of the area or of
the intersection), or ignored in reductions such asunion_all().
The scalar object (when accessing a single element of a GeoSeries) is the
PythonNoneobject.

Missing geometriesare unknown values in a GeoSeries. They will typically
be propagated in operations (for example in calculations of the area or of
the intersection), or ignored in reductions such asunion_all().
The scalar object (when accessing a single element of a GeoSeries) is the
PythonNoneobject.

Warning

Starting from GeoPandas v0.6.0, those two concepts are more consistently
separated. Seebelowfor more details
on what changed compared to earlier versions.

Consider the following example GeoSeries with one polygon, one missing value
and one empty polygon:

In spatial operations, missing geometries will typically propagate (be missing
in the result as well), while empty geometries are treated as a geometry
and the result will depend on the operation:

TheGeoSeries.isna()method will only check for missing values and not
for empty geometries:

On the other hand, if you want to know which values are empty geometries,
you can use theGeoSeries.is_emptyattribute:

To get only the actual geometry objects that are neither missing nor empty,
you can use a combination of both:

Changes since GeoPandas v0.6.0#

In GeoPandas v0.6.0, the missing data handling was refactored and made more
consistent across the library.

Historically, missing (“NA”) values in a GeoSeries could be represented by empty
geometric objects, in addition to standard representations such asNoneandnp.nan. At least, this was the case inGeoSeries.isna()or when a
GeoSeries got aligned in geospatial operations. But, other methods likedropna()andfillna()did not follow this
approach and did not consider empty geometries as missing.

In GeoPandas v0.6.0, the most important change isGeoSeries.isna()no
longer treating empty as missing:

Using the small example from above, the old behaviour treated both the
empty as missing geometry as “missing”:>>>s0    POLYGON ((0 0, 1 1, 0 1, 0 0))1                              None2          GEOMETRYCOLLECTION EMPTYdtype: object>>>s.isna()0    False1     True2     Truedtype: boolStarting from GeoPandas v0.6.0, it will now only see actual missing values
as missing:In [11]:s.isna()Out[11]:0    False1     True2    Falsedtype: boolFor now, whenisna()is called on a GeoSeries with empty geometries,
a warning is raised to alert the user of the changed behaviour with an
indication how to solve this.

Using the small example from above, the old behaviour treated both the
empty as missing geometry as “missing”:>>>s0    POLYGON ((0 0, 1 1, 0 1, 0 0))1                              None2          GEOMETRYCOLLECTION EMPTYdtype: object>>>s.isna()0    False1     True2     Truedtype: bool

Using the small example from above, the old behaviour treated both the
empty as missing geometry as “missing”:

Starting from GeoPandas v0.6.0, it will now only see actual missing values
as missing:In [11]:s.isna()Out[11]:0    False1     True2    Falsedtype: boolFor now, whenisna()is called on a GeoSeries with empty geometries,
a warning is raised to alert the user of the changed behaviour with an
indication how to solve this.

Starting from GeoPandas v0.6.0, it will now only see actual missing values
as missing:

For now, whenisna()is called on a GeoSeries with empty geometries,
a warning is raised to alert the user of the changed behaviour with an
indication how to solve this.

Additionally, the behaviour ofGeoSeries.align()changed to use
missing values instead of empty geometries to fill non-matching indexes.
Consider the following small toy example:

Previously, thealignmethod would use empty geometries to fill
values:>>>s1_aligned,s2_aligned=s1.align(s2)>>>s1_aligned0                 POINT (0 0)1                 POINT (1 1)2    GEOMETRYCOLLECTION EMPTYdtype: object>>>s2_aligned0    GEOMETRYCOLLECTION EMPTY1                 POINT (1 1)2                 POINT (2 2)dtype: objectThis method is used under the hood when performing spatial operations on
mis-aligned GeoSeries objects:>>>s1.intersection(s2)0    GEOMETRYCOLLECTION EMPTY1                 POINT (1 1)2    GEOMETRYCOLLECTION EMPTYdtype: objectStarting from GeoPandas v0.6.0,GeoSeries.align()will use missing
values to fill in the non-aligned indices, to be consistent with the
behaviour in pandas:In [17]:s1_aligned,s2_aligned=s1.align(s2)In [18]:s1_alignedOut[18]:0    POINT (0 0)1    POINT (1 1)2           Nonedtype: geometryIn [19]:s2_alignedOut[19]:0           None1    POINT (1 1)2    POINT (2 2)dtype: geometryThis has the consequence that spatial operations will also use missing
values instead of empty geometries, which can have a different behaviour
depending on the spatial operation:In [20]:s1.intersection(s2)Out[20]:0           None1    POINT (1 1)2           Nonedtype: geometry

Previously, thealignmethod would use empty geometries to fill
values:>>>s1_aligned,s2_aligned=s1.align(s2)>>>s1_aligned0                 POINT (0 0)1                 POINT (1 1)2    GEOMETRYCOLLECTION EMPTYdtype: object>>>s2_aligned0    GEOMETRYCOLLECTION EMPTY1                 POINT (1 1)2                 POINT (2 2)dtype: objectThis method is used under the hood when performing spatial operations on
mis-aligned GeoSeries objects:>>>s1.intersection(s2)0    GEOMETRYCOLLECTION EMPTY1                 POINT (1 1)2    GEOMETRYCOLLECTION EMPTYdtype: object

Previously, thealignmethod would use empty geometries to fill
values:

This method is used under the hood when performing spatial operations on
mis-aligned GeoSeries objects:

Starting from GeoPandas v0.6.0,GeoSeries.align()will use missing
values to fill in the non-aligned indices, to be consistent with the
behaviour in pandas:In [17]:s1_aligned,s2_aligned=s1.align(s2)In [18]:s1_alignedOut[18]:0    POINT (0 0)1    POINT (1 1)2           Nonedtype: geometryIn [19]:s2_alignedOut[19]:0           None1    POINT (1 1)2    POINT (2 2)dtype: geometryThis has the consequence that spatial operations will also use missing
values instead of empty geometries, which can have a different behaviour
depending on the spatial operation:In [20]:s1.intersection(s2)Out[20]:0           None1    POINT (1 1)2           Nonedtype: geometry

Starting from GeoPandas v0.6.0,GeoSeries.align()will use missing
values to fill in the non-aligned indices, to be consistent with the
behaviour in pandas:

This has the consequence that spatial operations will also use missing
values instead of empty geometries, which can have a different behaviour
depending on the spatial operation:


--- CODE BLOCK ---
In [1]: from shapely.geometry import Polygon

In [2]: s = geopandas.GeoSeries([Polygon([(0, 0), (1, 1), (0, 1)]), None, Polygon([])])

In [3]: s
Out[3]: 
0    POLYGON ((0 0, 1 1, 0 1, 0 0))
1                              None
2                     POLYGON EMPTY
dtype: geometry

------------------



--- CODE BLOCK ---
In [4]: s.area
Out[4]: 
0    0.5
1    NaN
2    0.0
dtype: float64

In [5]: s.union(Polygon([(0, 0), (0, 1), (1, 1), (1, 0)]))
Out[5]: 
0    POLYGON ((1 1, 1 0, 0 0, 0 1, 1 1))
1                                   None
2    POLYGON ((0 1, 1 1, 1 0, 0 0, 0 1))
dtype: geometry

In [6]: s.intersection(Polygon([(0, 0), (0, 1), (1, 1), (1, 0)]))
Out[6]: 
0    POLYGON ((0 0, 0 1, 1 1, 0 0))
1                              None
2                     POLYGON EMPTY
dtype: geometry

------------------



--- CODE BLOCK ---
In [7]: s.isna()
Out[7]: 
0    False
1     True
2    False
dtype: bool

------------------



--- CODE BLOCK ---
In [8]: s.is_empty
Out[8]: 
0    False
1    False
2     True
dtype: bool

------------------



--- CODE BLOCK ---
In [9]: s.is_empty | s.isna()
Out[9]: 
0    False
1     True
2     True
dtype: bool

In [10]: s[~(s.is_empty | s.isna())]
Out[10]: 
0    POLYGON ((0 0, 1 1, 0 1, 0 0))
dtype: geometry

------------------



--- CODE BLOCK ---
>>> s
0    POLYGON ((0 0, 1 1, 0 1, 0 0))
1                              None
2          GEOMETRYCOLLECTION EMPTY
dtype: object

>>> s.isna()
0    False
1     True
2     True
dtype: bool

------------------



--- CODE BLOCK ---
In [11]: s.isna()
Out[11]: 
0    False
1     True
2    False
dtype: bool

------------------



--- CODE BLOCK ---
In [12]: from shapely.geometry import Point

In [13]: s1 = geopandas.GeoSeries([Point(0, 0), Point(1, 1)], index=[0, 1])

In [14]: s2 = geopandas.GeoSeries([Point(1, 1), Point(2, 2)], index=[1, 2])

In [15]: s1
Out[15]: 
0    POINT (0 0)
1    POINT (1 1)
dtype: geometry

In [16]: s2
Out[16]: 
1    POINT (1 1)
2    POINT (2 2)
dtype: geometry

------------------



--- CODE BLOCK ---
>>> s1_aligned, s2_aligned = s1.align(s2)

>>> s1_aligned
0                 POINT (0 0)
1                 POINT (1 1)
2    GEOMETRYCOLLECTION EMPTY
dtype: object

>>> s2_aligned
0    GEOMETRYCOLLECTION EMPTY
1                 POINT (1 1)
2                 POINT (2 2)
dtype: object

------------------



--- CODE BLOCK ---
>>> s1.intersection(s2)
0    GEOMETRYCOLLECTION EMPTY
1                 POINT (1 1)
2    GEOMETRYCOLLECTION EMPTY
dtype: object

------------------



--- CODE BLOCK ---
In [17]: s1_aligned, s2_aligned = s1.align(s2)

In [18]: s1_aligned
Out[18]: 
0    POINT (0 0)
1    POINT (1 1)
2           None
dtype: geometry

In [19]: s2_aligned
Out[19]: 
0           None
1    POINT (1 1)
2    POINT (2 2)
dtype: geometry

------------------



--- CODE BLOCK ---
In [20]: s1.intersection(s2)
Out[20]: 
0           None
1    POINT (1 1)
2           None
dtype: geometry

------------------
