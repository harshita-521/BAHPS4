An Example Python Project

In this section, we will create a Python project that utilizes theWhiteboxToolslibrary to interpolate a LiDAR point-cloud, to process the resulting digital elevation model (DEM) to make it suitable for hydrological applications, and to perform a simple flow-accumulation operation. I suggest using an advanced coding text editor, such asVisual Studio CodeorAtom, for this tutorial, but Python code can be written using any basic text editor.

Begin by creating a dedicated project directory calledFlowAccumExampleand copyWhiteboxToolsbinary file (i.e. the compressed file downloaded from theGeomorphometry & Hydrogeomatics Research Groupwebsite) into this folder. Using the decompression software on your computer, decompress (i.e. an operation sometimes calledunzipping) the file into the newly createdFlowAccumExampledirectory. You will find the compressed file contains a folder with contents similar to the following:

The folder contains a number of files, including theWhiteboxToolsexecutable file, thewhitebox_tools.pypython script, the WhiteboxTools Runner (wb_runner.py; see below), and this user manual. It is likely that the folder has a name that reflects the operating system and architecture that the binary file was compiled for (e.g. WhiteboxTools_darwin_amd64). Rename this directory toWBT. Also note, depending on your decompression software, it may be the case that the contents of theWBTfolder itself contains a sub-directory that actually holds these files. If this is the case, be sure to move the contents of the sub-directory into theWBTparent directory.

Using your text editor, create a new Python script file, calledFlowAccumulation.pywithin theFlowAccumExampledirectory. We will begin by importing theWhiteboxToolsclass from thewhitebox_tools.pyscript contained within theWBTsub-directory. Unfortunately, Python's module system is only able to import classes and function definitions declared in external Python scriptsif these external files are contained somewhere on the Python path or in the directory containing the script file into which you are importing. This is important because based on the project structure that we have established, thewhitebox_tools.pyscript is actually contained within a sub-directory of theFlowAccumExampledirectory and is therefore not directly accessible, unless you have previously installed the script on the Python path. Another, perhaps easier solution to this problem is to create a file named__init__.py(those are two leading and trailing underscore characters) within theFlowAccumExampledirectory. The presence of this empty file will make Python treat theWBTdirectory as containing packages, in this case, thewhitebox_toolspackage. For more information, see the Python documentation onmodules and packages.

At this stage, you should have a project directory structure like the following:

Many operating systems will disallow the execution of files that are downloaded directly from the Internet. As such, it is possible that you will need to explicitly give thewhitebox_tools.exepermission to execute on your computer (Note: here we are referring to the compiledWhiteboxToolsbinary file and not the similarly named Python scriptwhitebox_tools.pyalso contained in the folder). The procedure for doing this depends on your specific operating system. On MacOS, for example, this is usually achieved using the 'Security & Privacy' tab under 'System Preferences'. To test whetherwhitebox_tools.exehas permission to run on your system, double-click the file. If the file is configured to execute, a command terminal will automatically open and theWhiteboxToolshelp documentation and a listing of the available tools will be printed. If this does not occur, you likely need to give the file permission to execute.

Using your text editor, you may now add the following lines to theFlowAccumulation.pyfile.

In the import statement,WBTis a reference to the package folder containing theWhiteboxToolsfiles;whitebox_toolsis a reference to thewhitebox_tools.pyscript contained with this package folder; andWhiteboxToolsis a reference to theWhiteboxToolsclass contained within this script file. Please note that if you named your directory containing theWhiteboxToolsfiles something other thanWBT, you would need to alter the import statement accordingly.

Downloadthe St. Elis Mountains and Gulf of Alaska sample data set (StElisAk.laz) from theWhiteboxToolssection of the site and decompress the zip file. This file contains a LiDAR point cloud that has been previously filtered to remove points associated with non-ground returns, mainly trees (Figure 4). Create a sub-directory within the project folder called 'data' and copyStElisAk.lazinto the folder.



Now we can complete our flow accumulation analysis with the following code:

To run the above script, open a terminal (command prompt),cdto the script containing folder, and run the following command:

If Python 3 is not your default Python version, substitutepython3forpythonin the above command line. The final D-infinity flow accumulation raster can be displayed in any GIS software of choice and should look similar to Figure 5.




--- CODE BLOCK ---
from WBT.whitebox_tools import WhiteboxTools

wbt = WhiteboxTools()

------------------



--- CODE BLOCK ---
import os
from WBT.whitebox_tools import WhiteboxTools

wbt = WhiteboxTools()

# Set the working directory, i.e. the folder containing the data,
# to the 'data' sub-directory.
wbt.set_working_dir(os.path.dirname(os.path.abspath(__file__)) + "/data/")

# When you're running mulitple tools, the outputs can be a tad
# chatty. In this case, you may want to suppress the output by
# setting the verbose mode to False.
# wbt.set_verbose_mode(False)

# Interpolate the LiDAR data using an inverse-distance weighting
# (IDW) scheme.
print("Interpolating DEM...")
wbt.lidar_idw_interpolation(
i="StElisAk.laz",
output="raw_dem.tif",
parameter="elevation",
returns="last",
resolution=1.0,
weight=1.0,
radius=2.5
)

# The resulting DEM will contain NoData gaps. We need to fill
# these in by interpolating across the gap.
print("Filling missing data...")
wbt.fill_missing_data(
i="raw_dem.tif",
output="dem_nodata_filled.tif",
filter=11
)

# This DEM will contain grid cells that have no lower neighbours.
# This condition is unsuited for flow-path modelling applications
# because these operations assume that each interior cell in the
# DEM has at least one downslope neighour. We'll use an operation
# called depression breaching to 'fix' the elevations within the
# DEM to enforce continuous flow.
print("Performing flow enforcement...")
wbt.breach_depressions(
dem="dem_nodata_filled.tif",
output="dem_hydro_enforced.tif"
)

# Lastly, perform the flow accumulation operation using the
# D-infinity flow algorithm.
print("Performing flow accumulation...")
wbt.d_inf_flow_accumulation(
dem="dem_hydro_enforced.tif",
output="flow_accum.tif",
log=True
)

print("Complete!")

------------------



--- CODE BLOCK ---
>>python FlowAccumulation.py

------------------
