GeoSeries#

Constructor#

GeoSeries([data, index, crs])

A Series object designed to store shapely geometry objects.

General methods and attributes#

GeoSeries.area

Returns aSeriescontaining the area of each geometry in theGeoSeriesexpressed in the units of the CRS.

GeoSeries.boundary

Returns aGeoSeriesof lower dimensional objects representing each geometry's set-theoreticboundary.

GeoSeries.bounds

Returns aDataFramewith columnsminx,miny,maxx,maxyvalues containing the bounds for each geometry.

GeoSeries.total_bounds

Returns a tuple containingminx,miny,maxx,maxyvalues for the bounds of the series as a whole.

GeoSeries.length

Returns aSeriescontaining the length of each geometry expressed in the units of the CRS.

GeoSeries.geom_type

Returns aSeriesof strings specifying theGeometry Typeof each object.

GeoSeries.offset_curve(distance[, ...])

Returns aLineStringorMultiLineStringgeometry at a distance from the object on its right or its left side.

GeoSeries.distance(other[, align])

Returns aSeriescontaining the distance to alignedother.

GeoSeries.hausdorff_distance(other[, align, ...])

Returns aSeriescontaining the Hausdorff distance to alignedother.

GeoSeries.frechet_distance(other[, align, ...])

Returns aSeriescontaining the Frechet distance to alignedother.

GeoSeries.representative_point()

Returns aGeoSeriesof (cheaply computed) points that are guaranteed to be within each geometry.

GeoSeries.exterior

Returns aGeoSeriesof LinearRings representing the outer boundary of each polygon in the GeoSeries.

GeoSeries.interiors

Returns aSeriesof List representing the inner rings of each polygon in the GeoSeries.

GeoSeries.minimum_bounding_radius()

Returns aSeriesof the radii of the minimum bounding circles that enclose each geometry.

GeoSeries.minimum_clearance()

Returns aSeriescontaining the minimum clearance distance, which is the smallest distance by which a vertex of the geometry could be moved to produce an invalid geometry.

GeoSeries.x

Return the x location of point geometries in a GeoSeries

GeoSeries.y

Return the y location of point geometries in a GeoSeries

GeoSeries.z

Return the z location of point geometries in a GeoSeries

GeoSeries.m

Return the m coordinate of point geometries in a GeoSeries

GeoSeries.get_coordinates([include_z, ...])

Gets coordinates from aGeoSeriesas aDataFrameof floats.

GeoSeries.count_coordinates()

Returns aSeriescontaining the count of the number of coordinate pairs in each geometry.

GeoSeries.count_geometries()

Returns aSeriescontaining the count of geometries in each multi-part geometry.

GeoSeries.count_interior_rings()

Returns aSeriescontaining the count of the number of interior rings in a polygonal geometry.

GeoSeries.set_precision(grid_size[, mode])

Returns aGeoSerieswith the precision set to a precision grid size.

GeoSeries.get_precision()

Returns aSeriesof the precision of each geometry.

GeoSeries.get_geometry(index)

Returns the n-th geometry from a collection of geometries.

Unary predicates#

GeoSeries.is_closed

Returns aSeriesofdtype('bool')with valueTrueif a LineString's or LinearRing's first and last points are equal.

GeoSeries.is_empty

Returns aSeriesofdtype('bool')with valueTruefor empty geometries.

GeoSeries.is_ring

Returns aSeriesofdtype('bool')with valueTruefor features that are closed.

GeoSeries.is_simple

Returns aSeriesofdtype('bool')with valueTruefor geometries that do not cross themselves.

GeoSeries.is_valid

Returns aSeriesofdtype('bool')with valueTruefor geometries that are valid.

GeoSeries.is_valid_reason()

Returns aSeriesof strings with the reason for invalidity of each geometry.

GeoSeries.is_valid_coverage(*[, gap_width])

Returns aboolindicating whether aGeoSeriesforms a valid coverage

GeoSeries.invalid_coverage_edges(*[, gap_width])

Returns aGeoSeriescontaining edges causing invalid polygonal coverage

GeoSeries.has_m

Returns aSeriesofdtype('bool')with valueTruefor features that have a m-component.

GeoSeries.has_z

Returns aSeriesofdtype('bool')with valueTruefor features that have a z-component.

GeoSeries.is_ccw

Returns aSeriesofdtype('bool')with valueTrueif a LineString or LinearRing is counterclockwise.

Binary predicates#

GeoSeries.contains(other[, align])

Returns aSeriesofdtype('bool')with valueTruefor each aligned geometry that containsother.

GeoSeries.contains_properly(other[, align])

Returns aSeriesofdtype('bool')with valueTruefor each aligned geometry that is completely insideother, with no common boundary points.

GeoSeries.crosses(other[, align])

Returns aSeriesofdtype('bool')with valueTruefor each aligned geometry that crossother.

GeoSeries.disjoint(other[, align])

Returns aSeriesofdtype('bool')with valueTruefor each aligned geometry disjoint toother.

GeoSeries.dwithin(other, distance[, align])

Returns aSeriesofdtype('bool')with valueTruefor each aligned geometry that is within a set distance fromother.

GeoSeries.geom_equals(other[, align])

Returns aSeriesofdtype('bool')with valueTruefor each aligned geometry equal toother.

GeoSeries.geom_equals_exact(other, tolerance)

Return True for all geometries that equal alignedotherto a given tolerance, else False.

GeoSeries.geom_equals_identical(other[, align])

Return True for all geometries that are identical alignedother, else False.

GeoSeries.intersects(other[, align])

Returns aSeriesofdtype('bool')with valueTruefor each aligned geometry that intersectsother.

GeoSeries.overlaps(other[, align])

Returns True for all aligned geometries that overlapother, else False.

GeoSeries.touches(other[, align])

Returns aSeriesofdtype('bool')with valueTruefor each aligned geometry that touchesother.

GeoSeries.within(other[, align])

Returns aSeriesofdtype('bool')with valueTruefor each aligned geometry that is withinother.

GeoSeries.covers(other[, align])

Returns aSeriesofdtype('bool')with valueTruefor each aligned geometry that is entirely coveringother.

GeoSeries.covered_by(other[, align])

Returns aSeriesofdtype('bool')with valueTruefor each aligned geometry that is entirely covered byother.

GeoSeries.relate(other[, align])

Returns the DE-9IM intersection matrices for the geometries

GeoSeries.relate_pattern(other, pattern[, align])

Returns True if the DE-9IM string code for the relationship between the geometries satisfies the pattern, else False.

Set-theoretic methods#

GeoSeries.clip_by_rect(xmin, ymin, xmax, ymax)

Returns aGeoSeriesof the portions of geometry within the given rectangle.

GeoSeries.difference(other[, align])

Returns aGeoSeriesof the points in each aligned geometry that are not inother.

GeoSeries.intersection(other[, align])

Returns aGeoSeriesof the intersection of points in each aligned geometry withother.

GeoSeries.symmetric_difference(other[, align])

Returns aGeoSeriesof the symmetric difference of points in each aligned geometry withother.

GeoSeries.union(other[, align])

Returns aGeoSeriesof the union of points in each aligned geometry withother.

Constructive methods and attributes#

GeoSeries.boundary

Returns aGeoSeriesof lower dimensional objects representing each geometry's set-theoreticboundary.

GeoSeries.buffer(distance[, resolution, ...])

Returns aGeoSeriesof geometries representing all points within a givendistanceof each geometric object.

GeoSeries.centroid

Returns aGeoSeriesof points representing the centroid of each geometry.

GeoSeries.concave_hull([ratio, allow_holes])

Returns aGeoSeriesof geometries representing the concave hull of vertices of each geometry.

GeoSeries.convex_hull

Returns aGeoSeriesof geometries representing the convex hull of each geometry.

GeoSeries.envelope

Returns aGeoSeriesof geometries representing the envelope of each geometry.

GeoSeries.extract_unique_points()

Returns aGeoSeriesof MultiPoints representing all distinct vertices of an input geometry.

GeoSeries.force_2d()

Forces the dimensionality of a geometry to 2D.

GeoSeries.force_3d([z])

Forces the dimensionality of a geometry to 3D.

GeoSeries.make_valid(*[, method, keep_collapsed])

Repairs invalid geometries.

GeoSeries.minimum_bounding_circle()

Returns aGeoSeriesof geometries representing the minimum bounding circle that encloses each geometry.

GeoSeries.maximum_inscribed_circle(*[, ...])

Returns aGeoSeriesof geometries representing the largest circle that is fully contained within the input geometry.

GeoSeries.minimum_clearance()

Returns aSeriescontaining the minimum clearance distance, which is the smallest distance by which a vertex of the geometry could be moved to produce an invalid geometry.

GeoSeries.minimum_clearance_line()

Returns aGeoSeriesof linestrings whose endpoints define the minimum clearance.

GeoSeries.minimum_rotated_rectangle()

Returns aGeoSeriesof the general minimum bounding rectangle that contains the object.

GeoSeries.normalize()

Returns aGeoSeriesof normalized geometries to normal form (or canonical form).

GeoSeries.orient_polygons(*[, exterior_cw])

Returns aGeoSeriesof geometries with enforced ring orientation.

GeoSeries.remove_repeated_points([tolerance])

Returns aGeoSeriescontaining a copy of the input geometry with repeated points removed.

GeoSeries.reverse()

Returns aGeoSerieswith the order of coordinates reversed.

GeoSeries.sample_points(size[, method, ...])

Sample points from each geometry.

GeoSeries.segmentize(max_segment_length)

Returns aGeoSerieswith vertices added to line segments based on maximum segment length.

GeoSeries.shortest_line(other[, align])

Returns the shortest two-point line between two geometries.

GeoSeries.simplify(tolerance[, ...])

Returns aGeoSeriescontaining a simplified representation of each geometry.

GeoSeries.simplify_coverage(tolerance, *[, ...])

Returns aGeoSeriescontaining a simplified representation of polygonal coverage.

GeoSeries.snap(other, tolerance[, align])

Snap the vertices and segments of the geometry to vertices of the reference.

GeoSeries.transform(transformation[, include_z])

Returns aGeoSerieswith the transformation function applied to the geometry coordinates.

Affine transformations#

GeoSeries.affine_transform(matrix)

Return aGeoSerieswith translated geometries.

GeoSeries.rotate(angle[, origin, use_radians])

Returns aGeoSerieswith rotated geometries.

GeoSeries.scale([xfact, yfact, zfact, origin])

Returns aGeoSerieswith scaled geometries.

GeoSeries.skew([xs, ys, origin, use_radians])

Returns aGeoSerieswith skewed geometries.

GeoSeries.translate([xoff, yoff, zoff])

Returns aGeoSerieswith translated geometries.

Linestring operations#

GeoSeries.interpolate(distance[, normalized])

Return a point at the specified distance along each geometry

GeoSeries.line_merge([directed])

Returns (Multi)LineStrings formed by combining the lines in a MultiLineString.

GeoSeries.project(other[, normalized, align])

Return the distance along each geometry nearest toother

GeoSeries.shared_paths(other[, align])

Returns the shared paths between two geometries.

Aggregating and exploding#

GeoSeries.build_area([node])

Creates an areal geometry formed by the constituent linework.

GeoSeries.constrained_delaunay_triangles()

Returns aGeoSerieswith the constrained Delaunay triangulation of polygons.

GeoSeries.delaunay_triangles([tolerance, ...])

Returns aGeoSeriesconsisting of objects representing the computed Delaunay triangulation between the vertices of an input geometry.

GeoSeries.explode([ignore_index, index_parts])

Explode multi-part geometries into multiple single geometries.

GeoSeries.intersection_all()

Returns a geometry containing the intersection of all geometries in theGeoSeries.

GeoSeries.polygonize([node, full])

Creates polygons formed from the linework of a GeoSeries.

GeoSeries.union_all([method, grid_size])

Returns a geometry containing the union of all geometries in theGeoSeries.

GeoSeries.voronoi_polygons([tolerance, ...])

Returns aGeoSeriesconsisting of objects representing the computed Voronoi diagram around the vertices of an input geometry.

Serialization / IO / conversion#

GeoSeries.from_arrow(arr, **kwargs)

Construct a GeoSeries from a Arrow array object with a GeoArrow extension type.

GeoSeries.from_file(filename, **kwargs)

Alternate constructor to create aGeoSeriesfrom a file.

GeoSeries.from_wkb(data[, index, crs, ...])

Alternate constructor to create aGeoSeriesfrom a list or array of WKB objects

GeoSeries.from_wkt(data[, index, crs, ...])

Alternate constructor to create aGeoSeriesfrom a list or array of WKT objects

GeoSeries.from_xy(x, y[, z, index, crs])

Alternate constructor to create aGeoSeriesof Point geometries from lists or arrays of x, y(, z) coordinates

GeoSeries.to_arrow([geometry_encoding, ...])

Encode a GeoSeries to GeoArrow format.

GeoSeries.to_file(filename[, driver, index])

Write theGeoSeriesto a file.

GeoSeries.to_json([show_bbox, drop_id, to_wgs84])

Returns a GeoJSON string representation of the GeoSeries.

GeoSeries.to_wkb([hex])

Convert GeoSeries geometries to WKB

GeoSeries.to_wkt(**kwargs)

Convert GeoSeries geometries to WKT

Projection handling#

GeoSeries.crs

The Coordinate Reference System (CRS) represented as apyproj.CRSobject.

GeoSeries.set_crs(**kwargs)



GeoSeries.to_crs([crs, epsg])

Returns aGeoSerieswith all geometries transformed to a new coordinate reference system.

GeoSeries.estimate_utm_crs([datum_name])

Returns the estimated UTM CRS based on the bounds of the dataset.

Missing values#

GeoSeries.fillna([value, inplace, limit])

Fill NA values with geometry (or geometries).

GeoSeries.isna()

Detect missing values.

GeoSeries.notna()

Detect non-missing values.

Overlay operations#

GeoSeries.clip(mask[, keep_geom_type, sort])

Clip points, lines, or polygon geometries to the mask extent.

Plotting#

GeoSeries.plot(*args, **kwargs)

Plot a GeoSeries.

GeoSeries.explore(*args, **kwargs)

Interactive map based on folium/leaflet.jsInteractive map based on GeoPandas and folium/leaflet.js

Spatial index#

GeoSeries.sindex

Generate the spatial index

GeoSeries.has_sindex

Check the existence of the spatial index without generating it.

Indexing#

GeoSeries.cx

Coordinate based indexer to select by intersection with bounding box.

Interface#

GeoSeries.__geo_interface__

Returns aGeoSeriesas a python feature collection.

Methods of pandasSeriesobjects are also available, although not
all are applicable to geometric objects and some may return aSeriesrather than aGeoSeriesresult when appropriate. The methodsisna()andfillna()have been
implemented specifically forGeoSeriesand are expected to work
correctly.