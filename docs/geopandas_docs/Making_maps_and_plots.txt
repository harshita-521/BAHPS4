Mapping and plotting tools#

GeoPandas provides a high-level interface to thematplotliblibrary for making maps. Mapping shapes is as easy as using theplot()method on aGeoSeriesorGeoDataFrame.

Loading some example data:

You can now plot those GeoDataFrames:

Note that in general, any options one can pass topyplotinmatplotlib(orstyle options that work for lines) can be passed to theplot()method.

Choropleth maps#

GeoPandas makes it easy to create Choropleth maps (maps where the color of each shape is based on the value of an associated variable). Simply use the plot command with thecolumnargument set to the column whose values you want used to assign colors.

Creating a legend#

When plotting a map, one can enable a legend using thelegendargument:

The following example plots the color bar below the map and adds its label usinglegend_kwds:

However, the default appearance of the legend and plot axes may not be desirable. One can define the plot axes (withax) and the legend axes (withcax) and then pass those in to theplot()call. The following example usesmpl_toolkitsto horizontally align the plot axes and the legend axes and change the width:

Choosing colors#

You can also modify the colors used byplot()with thecmapoption. For a full list of colormaps, seeChoosing Colormaps in Matplotlib.

To make the color transparent for when you just want to show the boundary, you have two options. One option is to dochicago.plot(facecolor="none",edgecolor="black"). However, this can cause a lot of confusion because"none"andNoneare different in the context of usingfacecolorand they do opposite things.Nonedoes the “default behavior” based on matplotlib, and if you use it forfacecolor, it actually adds a color. The second option is to usechicago.boundary.plot(). This option is more explicit and clear.:

The way color maps are scaled can also be manipulated with theschemeoption (if you havemapclassifyinstalled, which can be accomplished viacondainstall-cconda-forgemapclassify). Theschemeoption can be set to any scheme provided by mapclassify (e.g. ‘box_plot’, ‘equal_interval’,
‘fisher_jenks’, ‘fisher_jenks_sampled’, ‘headtail_breaks’, ‘jenks_caspall’, ‘jenks_caspall_forced’, ‘jenks_caspall_sampled’, ‘max_p_classifier’, ‘maximum_breaks’, ‘natural_breaks’, ‘quantiles’, ‘percentiles’, ‘std_mean’ or ‘user_defined’). Arguments can be passed in classification_kwds dict. See themapclassify documentationfor further details about these map classification schemes.

Missing data#

In some cases one may want to plot data which contains missing values - for some features one simply does not know the value. Geopandas (from the version 0.7) by defaults ignores such features.

However, passingmissing_kwdsone can specify the style and label of features containing None or NaN.

Other map customizations#

Maps usually do not have to have axis labels. You can turn them off usingset_axis_off()oraxis("off")axis methods.

Maps with layers#

There are two strategies for making a map with multiple layers – one more succinct, and one that is a little more flexible.

Before combining maps, however, remember to always ensure they share a common CRS (so they will align).

Method 1

Method 2: Using matplotlib objects

Control the order of multiple layers in a plot#

When plotting multiple layers, usezorderto take control of the order of layers being plotted.
The lower thezorderis, the lower the layer is on the map and vice versa.

Without specifiedzorder, cities (Points) gets plotted below world (Polygons), following the default order based on geometry types.

You can set thezorderfor cities higher than for world to move it of top.

Pandas plots#

Plotting methods also allow for different plot styles from pandas
along with the defaultgeoplot. These methods can be accessed using
thekindkeyword argument inplot(), and include:

geofor mappinglinefor line plotsbarorbarhfor bar plotshistfor histogramboxfor boxplotkdeordensityfor density plotsareafor area plotsscatterfor scatter plotshexbinfor hexagonal bin plotspiefor pie plots

geofor mapping

geofor mapping

linefor line plots

linefor line plots

barorbarhfor bar plots

barorbarhfor bar plots

histfor histogram

histfor histogram

boxfor boxplot

boxfor boxplot

kdeordensityfor density plots

kdeordensityfor density plots

areafor area plots

areafor area plots

scatterfor scatter plots

scatterfor scatter plots

hexbinfor hexagonal bin plots

hexbinfor hexagonal bin plots

piefor pie plots

piefor pie plots

You can also create these other plots using theGeoDataFrame.plot.<kind>accessor methods instead of providing thekindkeyword argument.
For example,hist, can be used to plot histograms of population for two different years from the Chicago dataset.

For more information, seeChart visualizationin the pandas documentation.

Other resources#

Links to Jupyter Notebooks for different mapping tasks:

Making Heat Maps


--- CODE BLOCK ---
In [1]: import geodatasets

In [2]: chicago = geopandas.read_file(geodatasets.get_path("geoda.chicago_commpop"))

In [3]: groceries = geopandas.read_file(geodatasets.get_path("geoda.groceries"))

------------------



--- CODE BLOCK ---
# Examine the chicago GeoDataFrame
In [4]: chicago.head()
Out[4]: 
         community  ...                                           geometry
0          DOUGLAS  ...  MULTIPOLYGON (((-87.609140876 41.844692503, -8...
1          OAKLAND  ...  MULTIPOLYGON (((-87.592152839 41.816929346, -8...
2      FULLER PARK  ...  MULTIPOLYGON (((-87.628798237 41.801893034, -8...
3  GRAND BOULEVARD  ...  MULTIPOLYGON (((-87.606708126 41.816813771, -8...
4          KENWOOD  ...  MULTIPOLYGON (((-87.592152839 41.816929346, -8...

[5 rows x 9 columns]

# Basic plot, single color
In [5]: chicago.plot();

------------------



--- CODE BLOCK ---
 # Plot by population
In [6]: chicago.plot(column="POP2010");

------------------



--- CODE BLOCK ---
# Plot population estimates with an accurate legend
In [7]: chicago.plot(column='POP2010', legend=True);

------------------



--- CODE BLOCK ---
# Plot population estimates with an accurate legend
In [8]: chicago.plot(
   ...:     column="POP2010",
   ...:     legend=True,
   ...:     legend_kwds={"label": "Population in 2010", "orientation": "horizontal"},
   ...: );
   ...: 

------------------



--- CODE BLOCK ---
# Plot population estimates with an accurate legend
In [9]: import matplotlib.pyplot as plt

In [10]: from mpl_toolkits.axes_grid1 import make_axes_locatable

In [11]: fig, ax = plt.subplots(1, 1)

In [12]: divider = make_axes_locatable(ax)

In [13]: cax = divider.append_axes("bottom", size="5%", pad=0.1)

In [14]: chicago.plot(
   ....:     column="POP2010",
   ....:     ax=ax,
   ....:     legend=True,
   ....:     cax=cax,
   ....:     legend_kwds={"label": "Population in 2010", "orientation": "horizontal"},
   ....: );
   ....: 

------------------



--- CODE BLOCK ---
In [15]: chicago.plot(column='POP2010', cmap='OrRd');

------------------



--- CODE BLOCK ---
In [16]: chicago.boundary.plot();

------------------



--- CODE BLOCK ---
In [17]: chicago.plot(column='POP2010', cmap='OrRd', scheme='quantiles');

------------------



--- CODE BLOCK ---
In [18]: import numpy as np

In [19]: chicago.loc[np.random.choice(chicago.index, 30), 'POP2010'] = np.nan

In [20]: chicago.plot(column='POP2010');

------------------



--- CODE BLOCK ---
In [21]: chicago.plot(column='POP2010', missing_kwds={'color': 'lightgrey'});

In [22]: chicago.plot(
   ....:     column="POP2010",
   ....:     legend=True,
   ....:     scheme="quantiles",
   ....:     figsize=(15, 10),
   ....:     missing_kwds={
   ....:         "color": "lightgrey",
   ....:         "edgecolor": "red",
   ....:         "hatch": "///",
   ....:         "label": "Missing values",
   ....:     },
   ....: );
   ....: 

------------------



--- CODE BLOCK ---
In [23]: ax = chicago.plot()

In [24]: ax.set_axis_off();

------------------



--- CODE BLOCK ---
# Look at capitals
# Note use of standard `pyplot` line style options
In [25]: groceries.plot(marker='*', color='green', markersize=5);

# Check crs
In [26]: groceries = groceries.to_crs(chicago.crs)

# Now you can overlay over the outlines

------------------



--- CODE BLOCK ---
In [27]: base = chicago.plot(color='white', edgecolor='black')

In [28]: groceries.plot(ax=base, marker='o', color='red', markersize=5);

------------------



--- CODE BLOCK ---
In [29]: fig, ax = plt.subplots()

In [30]: chicago.plot(ax=ax, color='white', edgecolor='black')
Out[30]: <Axes: >

In [31]: groceries.plot(ax=ax, marker='o', color='red', markersize=5)
Out[31]: <Axes: >

In [32]: plt.show();

------------------



--- CODE BLOCK ---
In [33]: ax = groceries.plot(color='k')

In [34]: chicago.plot(ax=ax);

------------------



--- CODE BLOCK ---
In [35]: ax = groceries.plot(color='k', zorder=2)

In [36]: chicago.plot(ax=ax, zorder=1);

------------------



--- CODE BLOCK ---
In [37]: chicago.plot(kind="scatter", x="POP2010", y="POP2000")
Out[37]: <Axes: xlabel='POP2010', ylabel='POP2000'>

------------------



--- CODE BLOCK ---
In [38]: chicago[["POP2000", "POP2010", "geometry"]].plot.hist(alpha=.4)
Out[38]: <Axes: ylabel='Frequency'>

------------------
