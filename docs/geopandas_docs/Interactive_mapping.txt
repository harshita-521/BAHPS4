Note

Interactive mapping#

Alongside static plots,geopandascan create interactive maps based on thefoliumlibrary.

Creating maps for interactive exploration mirrors the API of staticplotsin anexplore()method of a GeoSeries or GeoDataFrame.

Loading some example data:

The simplest option is to useGeoDataFrame.explore():

Interactive plotting offers largely the same customisation as static one plus some features on top of that. Check the code below which plots a customised choropleth map. You can use"BoroName"column with NY boroughs names as an input of the choropleth, show (only) its name in the tooltip on hover but show all values on click. You can also pass custom background tiles (either a name supported by folium, a name recognized byxyzservices.providers.query_name(), XYZ URL orxyzservices.TileProviderobject), specify colormap (all supported bymatplotlib) and specify black outline.

Note

Note that the GeoDataFrame needs to have a CRS set if you want to use background tiles.

Theexplore()method returns afolium.Mapobject, which can also be passed directly (as you do withaxinplot()). You can then use folium functionality directly on the resulting map. In the example below, you can plot two GeoDataFrames on the same map and add layer control using folium. You can also add additional tiles allowing you to change the background directly in the map.


--- CODE BLOCK ---
[1]:

------------------



--- CODE BLOCK ---
import geopandas
import geodatasets

nybb = geopandas.read_file(geodatasets.get_path("nybb"))
chicago = geopandas.read_file(geodatasets.get_path("geoda.chicago_commpop"))
groceries = geopandas.read_file(geodatasets.get_path("geoda.groceries")).explode(ignore_index=True)

------------------



--- CODE BLOCK ---
[2]:

------------------



--- CODE BLOCK ---
nybb.explore()

------------------



--- CODE BLOCK ---
[2]:

------------------



--- CODE BLOCK ---
[3]:

------------------



--- CODE BLOCK ---
nybb.explore(
    column="BoroName",  # make choropleth based on "BoroName" column
    tooltip="BoroName",  # show "BoroName" value in tooltip (on hover)
    popup=True,  # show all values in popup (on click)
    tiles="CartoDB positron",  # use "CartoDB positron" tiles
    cmap="Set1",  # use "Set1" matplotlib colormap
    style_kwds=dict(color="black"),  # use black outline
)

------------------



--- CODE BLOCK ---
[3]:

------------------



--- CODE BLOCK ---
[4]:

------------------



--- CODE BLOCK ---
import folium

m = chicago.explore(
    column="POP2010",  # make choropleth based on "POP2010" column
    scheme="naturalbreaks",  # use mapclassify's natural breaks scheme
    legend=True,  # show legend
    k=10,  # use 10 bins
    tooltip=False,  # hide tooltip
    popup=["POP2010", "POP2000"],  # show popup (on-click)
    legend_kwds=dict(colorbar=False),  # do not use colorbar
    name="chicago",  # name of the layer in the map
)

groceries.explore(
    m=m,  # pass the map object
    color="red",  # use red color on all points
    marker_kwds=dict(radius=5, fill=True),  # make marker radius 10px with fill
    tooltip="Address",  # show "name" column in the tooltip
    tooltip_kwds=dict(labels=False),  # do not show column label in the tooltip
    name="groceries",  # name of the layer in the map
)

folium.TileLayer("CartoDB positron", show=False).add_to(
    m
)  # use folium to add alternative tiles
folium.LayerControl().add_to(m)  # use folium to add layer control

m  # show map

------------------



--- CODE BLOCK ---
[4]:

------------------
