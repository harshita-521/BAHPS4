Geometric manipulations#

GeoPandas makes available all the tools for geometric manipulations in theShapely library.

Note that documentation for all set-theoretic tools for creating new shapes using the relationship between two different spatial datasets – like creating intersections, or differences – can be found atSet operations with overlay.

Constructive methods#

Returns aGeoSeriesof geometries representing all points within a givendistanceof each geometric object.

Returns aGeoSeriesof lower dimensional objects representing
each geometry’s set-theoreticboundary.

Returns aGeoSeriesof points for each geometric centroid.

Returns aGeoSeriesof geometries representing the smallest
concavePolygoncontaining all the points in each object unless the
number of points in the object is less than three. For two points,
the concave hull collapses to aLineString; for 1, aPoint.

Returns aGeoSeriesof geometries representing the smallest
convexPolygoncontaining all the points in each object unless the
number of points in the object is less than three. For two points,
the convex hull collapses to aLineString; for 1, aPoint.

Returns aGeoSerieswith the constrained Delaunay triangulation
of polygons. A constrained Delaunay triangulation requires the edges of the input
polygon(s) to be in the set of resulting triangle edges. An unconstrained
delaunay triangulation only triangulates based on the vertices, hence triangle
edges could cross polygon boundaries.

Returns aGeoSeriesconsisting of polygons (default) or linestrings
(only_edges=True) representing the computed Delaunay triangulation around the vertices
of an input geometry.

Returns aGeoSeriesof geometries representing the point or
smallest rectangular polygon (with sides parallel to the coordinate
axes) that contains each object.

Returns aGeoSeriesof geometries containing all distinct
vertices of each input geometry as a multipoint.

Returns aGeoSeriescontaining aLinestringorMultiLineStringgeometry at a distance from the object on its right or its left side.

Returns aGeoSeriescontaining a copy of the input geometry
with repeated points removed.

Returns aGeoSeriescontaining a simplified representation of
each object.

Returns aGeoSerieswith additional vertices added to line
segments based on max_segment_length.

Return a geometry containing the union of all geometries in theGeoSeries.

Affine transformations#

Transform the geometries of theGeoSeriesusing an affine transformation matrix

Rotate the coordinates of theGeoSeries.

Scale the geometries of theGeoSeriesalong each (x, y, z) dimension.

Shear/Skew the geometries of theGeoSeriesby angles along x and y dimensions.

Shift the coordinates of theGeoSeries.

Examples of geometric manipulations#

Some geographic operations return normal pandas objects.  Theareaproperty of aGeoSerieswill return apandas.Seriescontaining the area of each item in theGeoSeries:

Other operations return GeoPandas objects:

GeoPandas objects also know how to plot themselves. GeoPandas usesmatplotlibfor plotting. To generate a plot of aGeoSeries, use:

GeoPandas also implements alternate constructors that can read any data format recognized byPyogrio.  To read a zip file containing an ESRI shapefile with theborough boundaries of New York City(provided by thegeodatasetspackage):

To demonstrate a more complex operation, generate aGeoSeriescontaining 2000 random points:

Now draw a circle with fixed radius around each point:

You can collapse these circles into a singleMultiPolygongeometry with

To extract the part of this geometry contained in each borough, you can
just use:

and to get the area outside of the holes:

Note that this can be simplified a bit, sincegeometryis
available as an attribute on aGeoDataFrame, and theintersection()anddifference()methods are implemented with the
“&” and “-” operators, respectively.  For example, the latter could
have been expressed simply asboros.geometry-mp.

It’s easy to do things like calculate the fractional area in each
borough that are in the holes:


--- CODE BLOCK ---
>>> import geopandas
>>> from geopandas import GeoSeries
>>> from shapely.geometry import Polygon
>>> p1 = Polygon([(0, 0), (1, 0), (1, 1)])
>>> p2 = Polygon([(0, 0), (1, 0), (1, 1), (0, 1)])
>>> p3 = Polygon([(2, 0), (3, 0), (3, 1), (2, 1)])
>>> g = GeoSeries([p1, p2, p3])
>>> g
0         POLYGON ((0 0, 1 0, 1 1, 0 0))
1    POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))
2    POLYGON ((2 0, 3 0, 3 1, 2 1, 2 0))
dtype: geometry

------------------



--- CODE BLOCK ---
>>> print(g.area)
0    0.5
1    1.0
2    1.0
dtype: float64

------------------



--- CODE BLOCK ---
>>> g.buffer(0.5)
0    POLYGON ((-0.3535533905932737 0.35355339059327...
1    POLYGON ((-0.5 0, -0.5 1, -0.4975923633360985 ...
2    POLYGON ((1.5 0, 1.5 1, 1.502407636663901 1.04...
dtype: geometry

------------------



--- CODE BLOCK ---
>>> g.plot()

------------------



--- CODE BLOCK ---
>>> import geodatasets
>>> nybb_path = geodatasets.get_path('nybb')
>>> boros = geopandas.read_file(nybb_path)
>>> boros.set_index('BoroCode', inplace=True)
>>> boros.sort_index(inplace=True)
>>> boros
               BoroName     Shape_Leng    Shape_Area  \
BoroCode
1             Manhattan  359299.096471  6.364715e+08
2                 Bronx  464392.991824  1.186925e+09
3              Brooklyn  741080.523166  1.937479e+09
4                Queens  896344.047763  3.045213e+09
5         Staten Island  330470.010332  1.623820e+09

                                                   geometry
BoroCode
1         MULTIPOLYGON (((981219.0557861328 188655.31579...
2         MULTIPOLYGON (((1012821.805786133 229228.26458...
3         MULTIPOLYGON (((1021176.479003906 151374.79699...
4         MULTIPOLYGON (((1029606.076599121 156073.81420...
5         MULTIPOLYGON (((970217.0223999023 145643.33221...

------------------



--- CODE BLOCK ---
>>> boros['geometry'].convex_hull
BoroCode
1    POLYGON ((977855.4451904297 188082.3223876953,...
2    POLYGON ((1017949.977600098 225426.8845825195,...
3    POLYGON ((988872.8212280273 146772.0317993164,...
4    POLYGON ((1000721.531799316 136681.776184082, ...
5    POLYGON ((915517.6877458114 120121.8812543372,...
dtype: geometry

------------------



--- CODE BLOCK ---
>>> import numpy as np
>>> from shapely.geometry import Point
>>> xmin, xmax, ymin, ymax = 900000, 1080000, 120000, 280000
>>> xc = (xmax - xmin) * np.random.random(2000) + xmin
>>> yc = (ymax - ymin) * np.random.random(2000) + ymin
>>> pts = GeoSeries([Point(x, y) for x, y in zip(xc, yc)])

------------------



--- CODE BLOCK ---
>>> circles = pts.buffer(2000)

------------------



--- CODE BLOCK ---
>>> mp = circles.union_all()

------------------



--- CODE BLOCK ---
>>> holes = boros['geometry'].intersection(mp)

------------------



--- CODE BLOCK ---
>>> boros_with_holes = boros['geometry'].difference(mp)

------------------



--- CODE BLOCK ---
>>> holes.area / boros.geometry.area
BoroCode
1    0.579939
2    0.586833
3    0.608174
4    0.582172
5    0.558075
dtype: float64

------------------
